diff --git a/SerialICE/patches/serialice.lua-5.2.diff b/SerialICE/patches/serialice.lua-5.2.diff
index dd10e50..e69de29 100644
--- a/SerialICE/patches/serialice.lua-5.2.diff
+++ b/SerialICE/patches/serialice.lua-5.2.diff
@@ -1,13 +0,0 @@
-diff --git a/SerialICE/scripts/serialice.lua b/SerialICE/scripts/serialice.lua
-index 0e7e902..947f6a8 100644
---- a/SerialICE/scripts/serialice.lua
-+++ b/SerialICE/scripts/serialice.lua
-@@ -26,7 +26,7 @@ io.write("SerialICE: Starting LUA script\n")
- 
- -- If you get an error here, install bitlib 
- -- (ie. http://luaforge.net/projects/bitlib/)
--require("bit")
-+require("bit32")
- 
- function printf(s,...)
- 	return io.write(s:format(...))
diff --git a/SerialICE/scripts/serialice.lua b/SerialICE/scripts/serialice.lua
index 0e7e902..5af8897 100644
--- a/SerialICE/scripts/serialice.lua
+++ b/SerialICE/scripts/serialice.lua
@@ -111,10 +111,10 @@ mem_write_log_hooks = new_list()
 prepend_to_list(mem_read_log_hooks, function(addr, size, data, target)
 	if (PCIe_bar ~= 0) and addr >= PCIe_bar and addr <= (PCIe_bar + PCIe_size) then
 		printf("PCIe %x:%02x.%x R.%02x => %s\n",
-			bit.band(0xff,bit.rshift(addr, 20)),
-			bit.band(0x1f,bit.rshift(addr, 15)),
-			bit.band(0x7,bit.rshift(addr, 12)),
-			bit.band(0xfff,addr),
+			bit32.band(0xff,bit32.rshift(addr, 20)),
+			bit32.band(0x1f,bit32.rshift(addr, 15)),
+			bit32.band(0x7,bit32.rshift(addr, 12)),
+			bit32.band(0xfff,addr),
 			size_data(size, data))
 		return true
 	end
@@ -123,10 +123,10 @@ end)
 prepend_to_list(mem_write_log_hooks, function(addr, size, data, target)
 	if (PCIe_bar ~= 0) and addr >= PCIe_bar and addr <= (PCIe_bar + PCIe_size) then
 		printf("PCIe %x:%02x.%x R.%02x <= %s\n",
-			bit.band(0xff,bit.rshift(addr, 20)),
-			bit.band(0x1f,bit.rshift(addr, 15)),
-			bit.band(0x7,bit.rshift(addr, 12)),
-			bit.band(0xfff,addr),
+			bit32.band(0xff,bit32.rshift(addr, 20)),
+			bit32.band(0x1f,bit32.rshift(addr, 15)),
+			bit32.band(0x7,bit32.rshift(addr, 12)),
+			bit32.band(0xfff,addr),
 			size_data(size, data))
 		return true
 	end
@@ -145,10 +145,10 @@ prepend_to_list(io_write_log_hooks, function(port, size, data, target)
 	end
 	if port >= 0xcfc and port <= 0xcff then
 		printf("PCI %x:%02x.%x R.%02x <= %s\n",
-			bit.band(0xff,bit.rshift(SerialICE_pci_device, 16)),
-			bit.band(0x1f,bit.rshift(SerialICE_pci_device, 11)),
-			bit.band(0x7,bit.rshift(SerialICE_pci_device, 8)),
-			bit.band(0xff,SerialICE_pci_device + (port - 0xcfc)),
+			bit32.band(0xff,bit32.rshift(SerialICE_pci_device, 16)),
+			bit32.band(0x1f,bit32.rshift(SerialICE_pci_device, 11)),
+			bit32.band(0x7,bit32.rshift(SerialICE_pci_device, 8)),
+			bit32.band(0xff,SerialICE_pci_device + (port - 0xcfc)),
 			size_data(size, data))
 		return true
 	end
@@ -160,10 +160,10 @@ prepend_to_list(io_read_log_hooks, function(port, size, data, target)
 	end
 	if port >= 0xcfc and port <= 0xcff then
 		printf("PCI %x:%02x.%x R.%02x => %s\n",
-			bit.band(0xff,bit.rshift(SerialICE_pci_device, 16)),
-			bit.band(0x1f,bit.rshift(SerialICE_pci_device, 11)),
-			bit.band(0x7,bit.rshift(SerialICE_pci_device, 8)),
-			bit.band(0xff,SerialICE_pci_device + (port - 0xcfc)),
+			bit32.band(0xff,bit32.rshift(SerialICE_pci_device, 16)),
+			bit32.band(0x1f,bit32.rshift(SerialICE_pci_device, 11)),
+			bit32.band(0x7,bit32.rshift(SerialICE_pci_device, 8)),
+			bit32.band(0xff,SerialICE_pci_device + (port - 0xcfc)),
 			size_data(size, data))
 		return true
 	end
@@ -182,14 +182,14 @@ function(addr, hi, lo, filtered)
 			elseif mt == 6 then memtype = "Write-Back"
 			else memtype = "Unknown"
 			end
-			printf("CPU: Set MTRR %x base to %08x.%08x (%s)\n", (addr - 0x200) / 2, hi, bit.band(lo, 0xffffff00), memtype)
+			printf("CPU: Set MTRR %x base to %08x.%08x (%s)\n", (addr - 0x200) / 2, hi, bit32.band(lo, 0xffffff00), memtype)
 		else
-			if bit.band(lo, 0x800) == 0x800 then
+			if bit32.band(lo, 0x800) == 0x800 then
 				valid = "valid"
 			else
 				valid = "disabled"
 			end
-			printf("CPU: Set MTRR %x mask to %08x.%08x (%s)\n", (addr - 0x200) / 2, hi, bit.band(lo, 0xfffff000), valid)
+			printf("CPU: Set MTRR %x mask to %08x.%08x (%s)\n", (addr - 0x200) / 2, hi, bit32.band(lo, 0xfffff000), valid)
 		end
 		return true
 	end
@@ -207,7 +207,7 @@ if northbridge == "intel-i945" then
 		if port == 0xcfc then
 			-- Catch PCIe base address
 			if SerialICE_pci_device == pci_bdf(0,0,0,0x48) then
-				PCIe_bar  = bit.band(0xfc000000,data) % 0x100000000
+				PCIe_bar  = bit32.band(0xfc000000,data) % 0x100000000
 				PCIe_size = 64 * 1024 -- hard coded for now.
 				printf("PCIe BAR set up: 0x%08x\n", PCIe_bar)
 				return true
@@ -651,8 +651,8 @@ function SerialICE_cpuid_filter(in_eax, in_ecx, eax, ebx, ecx, edx)
 	-- Set number of cores to 1 on Core Duo and Atom to trick the
 	-- firmware into not trying to wake up non-BSP nodes.
 	if in_eax == 1 then
-		ebx = bit.band(0xff00ffff, ebx);
-		ebx = bit.bor(0x00010000, ebx);
+		ebx = bit32.band(0xff00ffff, ebx);
+		ebx = bit32.bor(0x00010000, ebx);
 		return true, eax, ebx, ecx, edx
 	end
 
